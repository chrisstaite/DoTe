name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]

env:
  BUILD_TYPE: Release

jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build_linux -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build_linux --config ${{env.BUILD_TYPE}} -j 4

    - name: Test
      run: ctest --test-dir ${{github.workspace}}/build_linux -C ${{env.BUILD_TYPE}} --output-on-failure

    - uses: actions/upload-artifact@v2
      with:
        name: Linux build
        path: ${{github.workspace}}/build_linux/dote
    
  build_linux_cross:
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        include:
          - architecture: mips
            qemu: mips
          - architecture: arm64
            qemu: aarch64

    steps:
    - uses: actions/checkout@v2

    - name: Install cross-compile dependencies
      run: sudo apt-get install debootstrap qemu-user-static binfmt-support sbuild schroot

    - name: Make chroot
      run: |
        mkdir ${{runner.temp}}/chroot
        sudo debootstrap --foreign --no-check-gpg --include=fakeroot,build-essential --arch=${{matrix.architecture}} stretch ${{runner.temp}}/chroot http://ftp.us.debian.org/debian/
        sudo cp /usr/bin/qemu-${{matrix.qemu}}-static ${{runner.temp}}/chroot/usr/bin/
        sudo chroot ${{runner.temp}}/chroot ./debootstrap/debootstrap --second-stage
        sudo sbuild-createchroot --arch=${{matrix.architecture}} --foreign --setup-only stretch ${{runner.temp}}/chroot http://ftp.us.debian.org/debian/

    - name: Install chroot dependencies
      run: |
        sudo chroot ${{runner.temp}}/chroot apt-get update
        sudo chroot ${{runner.temp}}/chroot apt-get --allow-unauthenticated install -qq -y build-essential libssl-dev cmake g++

    - name: Copy source to chroot
      run: |
        sudo mkdir ${{runner.temp}}/chroot/workdir
        sudo cp -r ${{github.workspace}}/* ${{runner.temp}}/chroot/workdir
        sudo mkdir ${{runner.temp}}/chroot/workdir/build

    - name: Configure CMake
      run: sudo chroot ${{runner.temp}}/chroot /bin/sh -c "cd /workdir/build && cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} /workdir"

    - name: Build
      run: sudo chroot ${{runner.temp}}/chroot cmake --build /workdir/build --config ${{env.BUILD_TYPE}} -- -j 4

    - name: Test
      run: sudo chroot ${{runner.temp}}/chroot ctest --test-dir /workdir/build -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Copy build out of chroot
      run: |
        sudo cp -r ${{runner.temp}}/chroot/workdir/build ${{github.workspace}}
        sudo chown -R $(whoami) ${{github.workspace}}/build

    - uses: actions/upload-artifact@v2
      with:
        name: Linux ${{matrix.architecture}} build
        path: ${{github.workspace}}/build/dote

  build_mac:
    runs-on: macos-latest

    env:
      OPENSSL_ROOT_DIR: /usr/local/opt/openssl/

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build_mac -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build_mac --config ${{env.BUILD_TYPE}} -j 4

    - name: Test
      run: ctest --test-dir ${{github.workspace}}/build_mac -C ${{env.BUILD_TYPE}} --output-on-failure

    - uses: actions/upload-artifact@v2
      with:
        name: macOS build
        path: ${{github.workspace}}/build_mac/dote

  get_release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
    steps:
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_linux:
    needs: [ get_release, build_linux ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: Linux build

    - name: Upload release binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}/dote
        asset_name: dote_linux
        asset_content_type: application/octet-stream

  upload_linux_cross:
    needs: [ get_release, build_linux_cross ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture:
          - mips
          - arm64

    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: Linux ${{matrix.architecture}} build

    - name: Upload release binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}/dote
        asset_name: dote_${{matrix.architecture}}
        asset_content_type: application/octet-stream

  upload_mac:
    needs: [ get_release, build_mac ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: macOS build

    - name: Upload release binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}/dote
        asset_name: dote_macos
        asset_content_type: application/octet-stream
