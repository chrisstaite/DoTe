name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]

env:
  BUILD_TYPE: Release

jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build_linux -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build_linux --config ${{env.BUILD_TYPE}}

    - name: Test
      run: ctest --test-dir ${{github.workspace}}/build_linux -C ${{env.BUILD_TYPE}} --output-on-failure

    - uses: actions/upload-artifact@v2
      with:
        name: Linux build
        path: ${{github.workspace}}/build_linux/dote
    
  build_linux_mips:
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Install cross-compile dependencies
      run: sudo apt-get install debootstrap qemu-user-static binfmt-support sbuild schroot

    - name: Cache chroot
      id: cache-chroot
      uses: actions/cache@v2
      with:
        path: ${{runner.temp}}/mips_chroot
        key: mips-chroot

    - name: Make mips chroot
      if: steps.cache-chroot.outputs.cache-hit != 'true'
      run: |
        mkdir ${{runner.temp}}/mips_chroot
        sudo debootstrap --foreign --no-check-gpg --include=fakeroot,build-essential --arch=mips stretch ${{runner.temp}}/mips_chroot http://ftp.us.debian.org/debian/
        sudo cp /usr/bin/qemu-mips-static ${{runner.temp}}/mips_chroot/usr/bin/
        sudo chroot ${{runner.temp}}/mips_chroot ./debootstrap/debootstrap --second-stage
        sudo sbuild-createchroot --arch=mips --foreign --setup-only stretch ${{runner.temp}}/mips_chroot http://ftp.us.debian.org/debian/

    - name: Install chroot dependencies
      if: steps.cache-chroot.outputs.cache-hit != 'true'
      run: |
        sudo chroot ${{runner.temp}}/mips_chroot apt-get update
        sudo chroot ${{runner.temp}}/mips_chroot apt-get --allow-unauthenticated install -qq -y build-essential libssl-dev cmake g++

    - name: Copy source to chroot
      run: |
        sudo mkdir ${{runner.temp}}/mips_chroot/workdir
        sudo cp -r ${{github.workspace}}/* ${{runner.temp}}/mips_chroot/workdir
        sudo mkdir ${{runner.temp}}/mips_chroot/workdir/build_mips

    - name: Configure CMake
      run: sudo chroot ${{runner.temp}}/mips_chroot /bin/sh -c "cd /workdir/build_mips && cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} /workdir"

    - name: Build
      run: sudo chroot ${{runner.temp}}/mips_chroot cmake --build /workdir/build_mips --config ${{env.BUILD_TYPE}}

    - name: Test
      run: sudo chroot ${{runner.temp}}/mips_chroot ctest --test-dir /workdir/build_mips -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Copy build out of chroot
      run: |
        sudo cp -r ${{runner.temp}}/mips_chroot/workdir/build_mips ${{github.workspace}}
        sudo chown -R $(whoami) ${{github.workspace}}/build_mips

    - uses: actions/upload-artifact@v2
      with:
        name: Linux MIPS build
        path: ${{github.workspace}}/build_mips/dote

  build_mac:
    runs-on: macos-latest

    env:
      OPENSSL_ROOT_DIR: /usr/local/opt/openssl/

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build_mac -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build_mac --config ${{env.BUILD_TYPE}}

    - name: Test
      run: ctest --test-dir ${{github.workspace}}/build_mac -C ${{env.BUILD_TYPE}} --output-on-failure

    - uses: actions/upload-artifact@v2
      with:
        name: macOS build
        path: ${{github.workspace}}/build_mac/dote

  get_release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
    steps:
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_linux:
    needs: [ get_release, build_linux ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: Linux build

    - name: Upload release binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}
        asset_name: dote_linux
        asset_content_type: application/octet-stream

  upload_linux_mips:
    needs: [ get_release, build_linux_mips ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: Linux MIPS build

    - name: Upload release binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}
        asset_name: dote_mips
        asset_content_type: application/octet-stream

  upload_mac:
    needs: [ get_release, build_mac ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: macOS build

    - name: Upload release binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}
        asset_name: dote_macos
        asset_content_type: application/octet-stream
