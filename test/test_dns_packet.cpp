#include "dns_packet.h"

#include <gtest/gtest.h>

namespace dote {

TEST(TestDnsPacket, RemovePadding)
{
    std::vector<unsigned char> PACKET = {
        0x01, 0x29,
        0x0f, 0xb8, 0x81, 0xa0, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
        0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
        0x00, 0x00, 0x10, 0x00, 0x01, 0x07, 0x65, 0x78,
        0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f,
        0x6d, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01,
        0x51, 0x80, 0x00, 0x0c, 0x0b, 0x76, 0x3d, 0x73,
        0x70, 0x66, 0x31, 0x20, 0x2d, 0x61, 0x6c, 0x6c,
        0x00, 0x00, 0x29, 0x05, 0xac, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xde, 0x00, 0x0c, 0x00, 0xda, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    };
    DnsPacket packet(std::vector<char>(PACKET.begin(), PACKET.end()));
    EXPECT_TRUE(packet.removeEdnsPadding());
    EXPECT_EQ(77u, packet.packet().size());
}

TEST(TestDnsPacket, RemovePaddingWithCompressedName)
{
    std::vector<unsigned char> PACKET = {
        0x01, 0xd4,
        0xad, 0x73, 0x81, 0xa0, 0x00, 0x01, 0x00, 0x02,
        0x00, 0x00, 0x00, 0x01, 0x07, 0x65, 0x78, 0x61,
        0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
        0x00, 0x00, 0x01, 0x00, 0x01, 0x07, 0x65, 0x78,
        0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f,
        0x6d, 0x00, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x01,
        0x2e, 0x85, 0x00, 0x9f, 0x00, 0x01, 0x08, 0x02,
        0x00, 0x01, 0x51, 0x80, 0x5e, 0xaf, 0x3d, 0x6d,
        0x5e, 0x93, 0x05, 0xf2, 0x15, 0x2a, 0x07, 0x65,
        0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63,
        0x6f, 0x6d, 0x00, 0x39, 0xfa, 0xef, 0xf6, 0x52,
        0x08, 0x1e, 0xf2, 0x51, 0x3d, 0xd9, 0xfd, 0x24,
        0xd9, 0x69, 0x11, 0xbc, 0x36, 0xff, 0x09, 0xaf,
        0xb9, 0xb1, 0x5c, 0x53, 0xa6, 0x6d, 0xbd, 0x07,
        0x7a, 0x68, 0x53, 0xcd, 0x52, 0x3f, 0x1c, 0xec,
        0x80, 0xc8, 0x63, 0xce, 0x57, 0xe2, 0xfb, 0xb9,
        0xdd, 0x36, 0x28, 0x4d, 0x69, 0x49, 0xcd, 0x94,
        0xde, 0xc7, 0x72, 0x18, 0x8c, 0x98, 0xc5, 0x33,
        0x9e, 0xcc, 0x7a, 0xbe, 0x06, 0xd6, 0x9e, 0x61,
        0xaa, 0x2a, 0x90, 0x1c, 0xd4, 0x8e, 0xe8, 0xb8,
        0xc1, 0x80, 0x34, 0x6f, 0x5a, 0x46, 0x28, 0xcc,
        0x22, 0xb6, 0x63, 0x8f, 0xf3, 0x59, 0xfa, 0x5b,
        0x18, 0xa3, 0xf5, 0x6b, 0xef, 0x74, 0x84, 0x61,
        0x9a, 0x51, 0xde, 0x31, 0x9f, 0x60, 0xc4, 0xa6,
        0x00, 0xdb, 0x41, 0x67, 0xfe, 0xf4, 0x73, 0x04,
        0x25, 0x4b, 0xf2, 0x36, 0x60, 0xfe, 0x1b, 0x65,
        0x23, 0x75, 0x34, 0xc0, 0x1d, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x01, 0x2e, 0x85, 0x00, 0x04, 0x5d,
        0xb8, 0xd8, 0x22, 0x00, 0x00, 0x29, 0x05, 0xac,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x0c,
        0x00, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    DnsPacket packet(std::vector<char>(PACKET.begin(), PACKET.end()));
    EXPECT_TRUE(packet.removeEdnsPadding());
    EXPECT_EQ(240u, packet.packet().size());
}

}  // namespace dote
